name: Infra-module Validation Workflow

on:
  workflow_call:
    inputs:
      working-directory:
        required: false
        default: "."
        type: string

# version locking

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        if: steps.init.outcome == 'success'
        run: terraform validate
        continue-on-error: true

      - name: Setup TFLint
        if: steps.init.outcome == 'success'
        uses: terraform-linters/setup-tflint@v4
        # with:
        #   tflint_version: ${{ inputs.tflint-version }}
      - name: TFLint
        if: steps.init.outcome == 'success'
        run: tflint --recursive
        continue-on-error: true

        # need to add directoy for actions
      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12
        continue-on-error: true
        with:
          directory: module/
          output_format: cli,sarif
          output_file_path: console,results.sarif

      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3

      #   if: success() || failure()
      #   with:
      #     sarif_file: results.sarif

  ansible-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ansible-lint (Formatting / Linting)
        uses: ansible/ansible-lint@main
        continue-on-error: true
        # # optional (see below):
        with:
          #   args: ""
          #   setup_python: "true"
          working_directory: "module"
        #   requirements_file: ""
      # https://github.com/marketplace/actions/run-ansible-lint
      # install ansible
      # do i need the syntax check? wont linter and vulnerability do this??
      # - name: Install Ansible
      #   uses: ansible/ansible-action@v2
      # Syntax (cli) - ansible-playbook â€”syntax-check
      # - name: Ansible Syntax Check
      # run: ansible-playbook --syntax-check
      # Security (gha action) - Ansible Vulnerability Scanner
      - name: Run Vulnerability Scanner
        uses: j0rdan-m/ansible-vulnerability-scanner@v2.0.1
        # with:
        #   artifact_path: playbooks/
        #   report_format: markdown
        #   package_manager: pip,apt
        #   cve_provider: nist
        # https://github.com/marketplace/actions/ansible-vulnerability-scanner
